generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  image          String?
  hashedPassword String?
  username       String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  orders         Order[]
  isPro          Boolean?
}

model Store {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  categories Category[]
  products   Product[]
  sizes      Size[]
  colors     Color[]
  orders     Order[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String    @db.ObjectId

  @@index([storeId])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  store       Store       @relation(fields: [storeId], references: [id])
  storeId     String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  price       Int
  size        Size        @relation(fields: [sizeId], references: [id])
  sizeId      String      @db.ObjectId
  color       Color       @relation(fields: [colorId], references: [id])
  colorId     String      @db.ObjectId
  stock       Int?
  brand       String
  description String
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String    @db.ObjectId
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String    @db.ObjectId
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
